#!/bin/bash

create_files_func() {
    if [ $# -lt 2 ]; then
          echo "Please provide a directory name and a package name"
          return 1
    fi

    if [ -z "$1" ]; then
          echo "Please provide a name for the new directory"
          return 1
    fi

    if [ -z "$2" ]; then
          echo "Please provide a solution name"
          return 1
    fi

    local dir_name="$1"
    local package_name="$2"
    mkdir "$dir_name" || return 1
    touch "$dir_name/main.go" "$dir_name/${dir_name}_test.go" "$dir_name/benchmark_test.go" "$dir_name/test_cases.go" || return 1

    local line_to_add="package main"

    for file in "$dir_name"/*.go; do
        echo "$line_to_add" > "$file" || return 1
    done

    # main.go
    package_upper=$(echo "$package_name" | tr '[:lower:]' '[:upper:]')
    echo  "\n\nfunc ${package_name}Recursive() {}" >> "$dir_name/main.go" || return 1
    echo  "\n\nfunc ${package_name}Iterative() {}" >> "$dir_name/main.go" || return 1

    # _test.go
    test_template="import \"testing\"\n
        /*
        	1) Test Recursive
        	    go test -run Test${package_upper}RecursiveSubTest
        	1a)Test Iterative
        	    go test -run Test${package_upper}IterativeSubTest
        	2) check coverage
        	    go test -coverprofile=coverage.out
        	3) check coverage by function:
        	    go tool cover -func=coverage.out
        	4) check coverage:
        	    go tool cover -html=coverage.out
        */


        func Test${package_upper}RecursiveSubTest(t *testing.T) {
        	for _, testCase := range testCases {
        		t.Run(testCase.name, func(t *testing.T) {
        			result := ${package_name}Recursive()
        			if result != testCase.result {
        				t.Errorf(\"${package_upper} %s produces %d, got %d\", testCase.s, testCase.result, result)
        			}
        		})
        	}
        }

        func Test${package_upper}IterativeSubTest(t *testing.T) {
        	for _, testCase := range testCases {
        		t.Run(testCase.name, func(t *testing.T) {
        			result := ${package_name}Iterative()
        			if result != testCase.result {
        				t.Errorf(\"${package_upper} %s produces %d, got %d\", testCase.s, testCase.result, result)
        			}
        		})
        	}
        }
        "

    echo "$test_template" >> "$dir_name/${dir_name}_test.go" || return 1

    # benchmark.go
    bench_template="import \"testing\"\n

    /*
         == 1st implementation ==
          1) go test -v -bench=${package_upper}Recursive  -run=XXX  -cpuprofile=cpu1.pprof
          2) cpu profile interactive
           go tool pprof cpu1.pprof | Interactive command \"top\", \"web\", \"list <<FUNC NAME>>\"
          3) go test -v -bench=${package_upper}Recursive -run=XXX -memprofile=mem1.pprof
          4) mem profile interactive
           go tool pprof mem1.pprof | Interactive command \"top\", \"web\", \"list <<FUNC NAME>>\"

         == 2nd implementation ==
         1) go test -v -bench=${package_upper}Iterative  -run=XXX  -cpuprofile=cpu2.pprof
         2) cpu profile interactive
            go tool pprof cpu2.pprof | Interactive command \"top\", \"web\", \"list <<FUNC NAME>>\"
         3) go test -v -bench=${package_upper}Iterative -run=XXX -memprofile=mem2.pprof
         4) mem profile interactive
            go tool pprof mem2.pprof | Interactive command \"top\", \"web\", \"list <<FUNC NAME>>\"

         == comparison ==
         5) compare results of two implementations in console
            go test -v -bench . -benchmem -run=XXX
         6) create cpu profile  with count
           go test -count=10  -bench=Benchmark${package_upper}Recursive -run=XXX -benchmem  > stat1 &&
           go test -count=10  -bench=Benchmark${package_upper}Iterative -run=XXX -benchmem > stat2
         7) compare with
             benchstat stat1 stat2
            */

   //  func BenchmarkSub${package_upper}RegWith(b *testing.B) {
   //  	for _, testCase := range testCases {
   //  		testCase := testCase
   //  		b.Run(testCase.name, func(b *testing.B) {
   //  			for i := 0; i < b.N; i++ {
   //  				${package_name}Recursive(testCase.s)
   //  			}
   //  		})
   //  	}
   //  }

   //  func BenchmarkSub${package_upper}IterativeWith(b *testing.B) {
   //  	for _, testCase := range testCases {
   //  		testCase := testCase
   //  		b.Run(testCase.name, func(b *testing.B) {
   //  			for i := 0; i < b.N; i++ {
   //  				${package_name}Iterative(testCase.s)
   //  			}
   //  		})
   //  	}
   //  }

     func Benchmark${package_upper}Recursive(b *testing.B) {
     	for i := 0; i < b.N; i++ {
     		${package_name}Recursive()
     	}
     }

     func Benchmark${package_upper}Iterative(b *testing.B) {
     	for i := 0; i < b.N; i++ {
     		${package_name}Iterative()
     	}
     }
    "

    # test cases
    test_cases_template="var testCases = []struct {
                                         		name   string
                                         		s      string
                                         		result int
                                         	}{
                                         		{\"II\", \"II\", 2},
                                         	}"

    echo  "$test_cases_template" >> "$dir_name/test_cases.go" || return 1

    echo "$bench_template" >> "$dir_name/benchmark_test.go" || return 1

    echo "Directory '$dir_name' and files created successfully."
}
prompt_context() {}
